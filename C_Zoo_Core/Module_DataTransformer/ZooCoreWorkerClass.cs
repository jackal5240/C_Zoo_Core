using GAIA.MainObject;
using System.ComponentModel;
using System.Diagnostics;
using System.Net.Sockets;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using ANB_UI.Tools;
using GAIA.Models;
using System.Windows.Media;
using System.Windows.Shapes;
using System.Windows.Controls;
using Rectangle = System.Windows.Shapes.Rectangle;
using Brushes = System.Windows.Media.Brushes;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using ANB_SSZ.Models;
using System.IO;
using ANB_SSZ.Module_UI;
using System.Windows.Navigation;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Windows.Forms;
using System;
using System.Diagnostics.Eventing.Reader;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TaskbarClock;
using GAIA.Module_DataReceiver;
using System.Reflection.Metadata;

namespace GAIA.Module_DataTransformer
{
    class ZooCoreWorkerClass
    {
        // 外部的各項屬性
        public static MainWindow? mainWin;
        public static BackgroundWorker? bgWorker;
        public static MajorMethod? majorMethod;
        public static ClassDT? classDT;

        // 是否開始進行資料的運算
        public static Boolean doWork = false;
        static Boolean flag = false;

        static DataCollectionObject dataCollectionObject = new DataCollectionObject();
        static string ScreenMode = "", SpecialPosition = "-1", LiveCamId = "", BearMode = "", str = "";
        static int mainCamera = -1, cameraBearWidth = 0, cameraBearHeight = 0, cameraIndex = 0, indexTemp = 0;
        static int BearLeftTopX = 0, BearLeftTopY = 0, BearRightBottomX = 0, BearRightBottomY = 0;
        static int ScreenLeftTopX = 0, ScreenLeftTopY = 0;
        static double cameraBearX1 = 0.0, cameraBearY1 = 0.0, cameraBearX2 = 0.0, cameraBearY2 = 0.0, temp = 0.0;
        static double confidenceIndex = 0.0, mappingX1 = 0.0, mappingY1 = 0.0, mappingX2 = 0.0, mappingY2 = 0.0, mapRotateX = 0.0, mapRotateY = 0.0;
        static dynamic dataArray;
        static Rectangle screenBox;       // 紅色透顯框
        static readonly HttpClient client = new HttpClient();
        static DateTime unixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        public static void DoWorkHandler(object? sender, DoWorkEventArgs e)
        {
            while (true)
            {
                if (doWork)
                {
                    // 主要工作內容
                    // 0.42276741035760124, 0.8981663920246509 ； 0.5258032152346733, 0.39093580828743113 ； 0.5399902336402811,0.6164290675406261 ； 0.3573157010492797, 0.5389300989596549
                    majorMethod.SetDRResultData("{\"machine\":{\"height\":27.8,\"degree\":-14.793567862533376},\"data_array\":[0.677388051124401,0.952174529628133,\"\",[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0514:20:54.028165\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0514:20:54.006925\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0514:20:54.084317\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0514:20:53.985243\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0514:20:54.012490\"],[0.8955184817314148,[0.8673011064529419,0.2513059675693512,0.9208433032035828,0.33699721097946167],\"walk\",\"2024-12-0514:20:53.992311\"],[0.9266933798789978,[0.02726651541888714,0.6970775723457336,0.1310650259256363,0.9377470016479492],\"walk\",\"2024-12-0514:20:54.018494\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0514:20:53.997511\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0514:20:54.069597\"]],\"selected_data\":[0.9266933798789978,[0.02726651541888714,0.6970775723457336,0.1310650259256363,0.9377470016479492],\"walk\",6,\"2024-12-0514:20:54.018494\"],\"version\":\"v0.9\",\"timestamp\":1733379654113610,\"productName\":\"Zoo\",\"env\":\"local\",\"resolutionX\":960,\"resolutionY\":540,\"width\":678.14,\"height\":408.7,\"area_egg\":[{\"egg_id\":\"1\",\"position_x_y\":[640,400]},{\"egg_id\":\"2\",\"position_x_y\":[1200,400]},{\"egg_id\":\"3\",\"position_x_y\":[1600,400]},{\"egg_id\":\"5\",\"position_x_y\":[2640,320]},{\"egg_id\":\"8\",\"position_x_y\":[1460,320]},{\"egg_id\":\"14\",\"position_x_y\":[2240,320]},{\"egg_id\":\"15\",\"position_x_y\":[240,320]},{\"egg_id\":\"16\",\"position_x_y\":[800,200]},{\"egg_id\":\"91\",\"position_x_y\":[640,400]},{\"egg_id\":\"92\",\"position_x_y\":[800,330]},{\"egg_id\":\"93\",\"position_x_y\":[1200,380]},{\"egg_id\":\"94\",\"position_x_y\":[2240,380]},{\"egg_id\":\"96\",\"position_x_y\":[640,280]},{\"egg_id\":\"97\",\"position_x_y\":[800,280]},{\"egg_id\":\"98\",\"position_x_y\":[1100,400]},{\"egg_id\":\"99\",\"position_x_y\":[2240,320]}],\"camera_mapping\":[{\"camera_id\":\"1\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,555.0,370.0,690.0,430.0],[120.0,0.0,240.0,135.0,800.0,350.0,1000.0,400.0],[240.0,0.0,360.0,135.0,800.0,350.0,1000.0,400.0],[360.0,0.0,480.0,135.0,1000.0,350.0,1100.0,400.0],[480.0,0.0,600.0,135.0,870.0,370.0,1010.0,430.0],[600.0,0.0,720.0,135.0,1010.0,370.0,1150.0,430.0],[720.0,0.0,840.0,135.0,1120.0,370.0,1380.0,430.0],[840.0,0.0,960.0,135.0,1111.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,555.0,400.0,690.0,460.0],[120.0,135.0,240.0,270.0,690.0,415.0,860.0,470.0],[240.0,135.0,360.0,270.0,860.0,430.0,1070.0,480.0],[360.0,135.0,480.0,270.0,1070.0,430.0,1120.0,480.0],[480.0,135.0,600.0,270.0,1120.0,430.0,1270.0,480.0],[600.0,135.0,720.0,270.0,1195.0,430.0,1270.0,480.0],[720.0,135.0,840.0,270.0,1260.0,430.0,1520.0,480.0],[840.0,135.0,960.0,270.0,1520.0,430.0,1960.0,480.0],[0.0,270.0,120.0,405.0,940.0,540.0,1020.0,620.0],[120.0,270.0,240.0,405.0,690.0,450.0,860.0,500.0],[240.0,270.0,360.0,405.0,860.0,540.0,980.0,620.0],[360.0,270.0,480.0,405.0,980.0,540.0,1100.0,620.0],[480.0,270.0,600.0,405.0,1100.0,600.0,1200.0,680.0],[600.0,270.0,720.0,405.0,1200.0,600.0,1300.0,680.0],[720.0,270.0,840.0,405.0,1290.0,540.0,1480.0,620.0],[840.0,270.0,960.0,405.0,1480.0,540.0,1960.0,620.0],[0.0,405.0,120.0,540.0,240.0,505.0,270.0,585.0],[120.0,405.0,240.0,540.0,270.0,505.0,860.0,585.0],[240.0,405.0,360.0,540.0,860.0,540.0,980.0,620.0],[360.0,405.0,480.0,540.0,980.0,540.0,1100.0,620.0],[480.0,405.0,600.0,540.0,1100.0,540.0,1200.0,600.0],[600.0,405.0,720.0,540.0,1200.0,540.0,1430.0,620.0],[720.0,405.0,840.0,540.0,1430.0,600.0,1780.0,680.0],[840.0,405.0,960.0,540.0,1535.0,600.0,1720.0,680.0]]},{\"camera_id\":\"2\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,1800.0,480.0,1860.0,510.0],[120.0,0.0,240.0,135.0,1850.0,480.0,1950.0,510.0],[240.0,0.0,360.0,135.0,1940.0,480.0,2040.0,510.0],[360.0,0.0,480.0,135.0,2030.0,480.0,2130.0,510.0],[480.0,0.0,600.0,135.0,2100.0,470.0,2350.0,520.0],[600.0,0.0,720.0,135.0,2200.0,470.0,2400.0,520.0],[720.0,0.0,840.0,135.0,2222.0,1111.0,7777.0,0.0],[840.0,0.0,960.0,135.0,2222.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,1830.0,540.0,1910.0,570.0],[120.0,135.0,240.0,270.0,1830.0,560.0,1910.0,610.0],[240.0,135.0,360.0,270.0,1880.0,560.0,2100.0,610.0],[360.0,135.0,480.0,270.0,2200.0,590.0,2260.0,640.0],[480.0,135.0,600.0,270.0,2300.0,590.0,2360.0,640.0],[600.0,135.0,720.0,270.0,2360.0,590.0,2580.0,640.0],[720.0,135.0,840.0,270.0,2580.0,590.0,2640.0,640.0],[840.0,135.0,960.0,270.0,2620.0,590.0,2660.0,640.0],[0.0,270.0,120.0,405.0,1830.0,480.0,1910.0,510.0],[120.0,270.0,240.0,405.0,1910.0,530.0,2000.0,580.0],[240.0,270.0,360.0,405.0,1990.0,530.0,2090.0,580.0],[360.0,270.0,480.0,405.0,2160.0,530.0,2220.0,580.0],[480.0,270.0,600.0,405.0,2200.0,530.0,2360.0,580.0],[600.0,270.0,720.0,405.0,2345.0,530.0,2490.0,580.0],[720.0,270.0,840.0,405.0,2475.0,530.0,2635.0,580.0],[840.0,270.0,960.0,405.0,2650.0,560.0,2690.0,610.0],[0.0,405.0,120.0,540.0,1630.0,480.0,1800.0,510.0],[120.0,405.0,240.0,540.0,1750.0,530.0,1930.0,580.0],[240.0,405.0,360.0,540.0,1900.0,530.0,2090.0,580.0],[360.0,405.0,480.0,540.0,2160.0,560.0,2280.0,610.0],[480.0,405.0,600.0,540.0,2300.0,560.0,2360.0,610.0],[600.0,405.0,720.0,540.0,2345.0,560.0,2490.0,610.0],[720.0,405.0,840.0,540.0,2475.0,560.0,2635.0,610.0],[840.0,405.0,960.0,540.0,2650.0,560.0,2690.0,610.0]]},{\"camera_id\":\"3\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,3333.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,2560.0,500.0,2590.0,530.0],[240.0,0.0,360.0,135.0,2320.0,500.0,2460.0,530.0],[360.0,0.0,480.0,135.0,2000.0,500.0,2160.0,530.0],[480.0,0.0,600.0,135.0,1800.0,500.0,1940.0,530.0],[600.0,0.0,720.0,135.0,1820.0,500.0,1860.0,530.0],[720.0,0.0,840.0,135.0,1760.0,500.0,1840.0,530.0],[840.0,0.0,960.0,135.0,3333.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,3333.0,2222.0,1111.0,0.0],[120.0,135.0,240.0,270.0,2240.0,480.0,2370.0,510.0],[240.0,135.0,360.0,270.0,2310.0,480.0,2430.0,510.0],[360.0,135.0,480.0,270.0,2380.0,480.0,2460.0,510.0],[480.0,135.0,600.0,270.0,2080.0,480.0,2230.0,510.0],[600.0,135.0,720.0,270.0,2080.0,480.0,2180.0,510.0],[720.0,135.0,840.0,270.0,1830.0,480.0,2000.0,510.0],[840.0,135.0,960.0,270.0,1800.0,480.0,1860.0,510.0],[0.0,270.0,120.0,405.0,3333.0,3333.0,1111.0,0.0],[120.0,270.0,240.0,405.0,2240.0,480.0,2320.0,510.0],[240.0,270.0,360.0,405.0,2300.0,480.0,2380.0,510.0],[360.0,270.0,480.0,405.0,2260.0,480.0,2360.0,510.0],[480.0,270.0,600.0,405.0,2130.0,480.0,2260.0,510.0],[600.0,270.0,720.0,405.0,2080.0,480.0,2260.0,510.0],[720.0,270.0,840.0,405.0,1960.0,480.0,2140.0,510.0],[840.0,270.0,960.0,405.0,2070.0,480.0,2130.0,510.0],[0.0,405.0,120.0,540.0,3333.0,4444.0,1111.0,0.0],[120.0,405.0,240.0,540.0,2240.0,480.0,2320.0,510.0],[240.0,405.0,360.0,540.0,2280.0,480.0,2360.0,510.0],[360.0,405.0,480.0,540.0,2230.0,480.0,2350.0,510.0],[480.0,405.0,600.0,540.0,2285.0,480.0,2320.0,510.0],[600.0,405.0,720.0,540.0,2160.0,480.0,2260.0,510.0],[720.0,405.0,840.0,540.0,2080.0,480.0,2200.0,510.0],[840.0,405.0,960.0,540.0,2180.0,480.0,2220.0,510.0]]},{\"camera_id\":\"4\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,2350.0,510.0,2440.0,550.0],[120.0,0.0,240.0,135.0,2000.0,510.0,2180.0,550.0],[240.0,0.0,360.0,135.0,1960.0,510.0,2040.0,550.0],[360.0,0.0,480.0,135.0,1960.0,510.0,2040.0,550.0],[480.0,0.0,600.0,135.0,1960.0,510.0,2040.0,550.0],[600.0,0.0,720.0,135.0,1860.0,510.0,2000.0,550.0],[720.0,0.0,840.0,135.0,1760.0,510.0,1890.0,550.0],[840.0,0.0,960.0,135.0,4444.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,2250.0,460.0,2350.0,510.0],[120.0,135.0,240.0,270.0,2580.0,590.0,2640.0,640.0],[240.0,135.0,360.0,270.0,2100.0,460.0,2250.0,510.0],[360.0,135.0,480.0,270.0,1980.0,460.0,2060.0,510.0],[480.0,135.0,600.0,270.0,1960.0,510.0,2040.0,550.0],[600.0,135.0,720.0,270.0,1960.0,460.0,2040.0,510.0],[720.0,135.0,840.0,270.0,1960.0,460.0,2040.0,510.0],[840.0,135.0,960.0,270.0,4444.0,2222.0,8888.0,0.0],[0.0,270.0,120.0,405.0,2350.0,460.0,2450.0,510.0],[120.0,270.0,240.0,405.0,2300.0,480.0,2380.0,510.0],[240.0,270.0,360.0,405.0,2150.0,460.0,2250.0,510.0],[360.0,270.0,480.0,405.0,2040.0,460.0,2120.0,510.0],[480.0,270.0,600.0,405.0,1960.0,460.0,2040.0,510.0],[600.0,270.0,720.0,405.0,2000.0,460.0,2150.0,510.0],[720.0,270.0,840.0,405.0,1960.0,460.0,2040.0,510.0],[840.0,270.0,960.0,405.0,1960.0,460.0,2040.0,510.0],[0.0,405.0,120.0,540.0,2250.0,430.0,2350.0,480.0],[120.0,405.0,240.0,540.0,2150.0,430.0,2250.0,480.0],[240.0,405.0,360.0,540.0,2100.0,430.0,2300.0,480.0],[360.0,405.0,480.0,540.0,2180.0,430.0,2280.0,480.0],[480.0,405.0,600.0,540.0,2160.0,430.0,2260.0,480.0],[600.0,405.0,720.0,540.0,2160.0,430.0,2260.0,480.0],[720.0,405.0,840.0,540.0,2000.0,430.0,2200.0,480.0],[840.0,405.0,960.0,540.0,2000.0,430.0,2200.0,480.0]]},{\"camera_id\":\"5\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,5555.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,1420.0,500.0,1540.0,530.0],[240.0,0.0,360.0,135.0,1440.0,500.0,1650.0,530.0],[360.0,0.0,480.0,135.0,1480.0,500.0,1640.0,530.0],[480.0,0.0,600.0,135.0,1410.0,500.0,1565.0,530.0],[600.0,0.0,720.0,135.0,1165.0,500.0,1300.0,530.0],[720.0,0.0,840.0,135.0,5555.0,1111.0,7777.0,0.0],[840.0,0.0,960.0,135.0,780.0,500.0,900.0,530.0],[0.0,135.0,120.0,270.0,5555.0,2222.0,1111.0,0.0],[120.0,135.0,240.0,270.0,1260.0,480.0,1460.0,510.0],[240.0,135.0,360.0,270.0,1200.0,480.0,1370.0,510.0],[360.0,135.0,480.0,270.0,1140.0,480.0,1340.0,510.0],[480.0,135.0,600.0,270.0,1060.0,480.0,1250.0,510.0],[600.0,135.0,720.0,270.0,1120.0,480.0,1240.0,510.0],[720.0,135.0,840.0,270.0,5555.0,2222.0,7777.0,0.0],[840.0,135.0,960.0,270.0,825.0,480.0,1040.0,510.0],[0.0,270.0,120.0,405.0,1100.0,480.0,1280.0,510.0],[120.0,270.0,240.0,405.0,1100.0,480.0,1280.0,510.0],[240.0,270.0,360.0,405.0,1090.0,480.0,1260.0,510.0],[360.0,270.0,480.0,405.0,1040.0,480.0,1230.0,510.0],[480.0,270.0,600.0,405.0,1050.0,480.0,1260.0,510.0],[600.0,270.0,720.0,405.0,1100.0,480.0,1220.0,510.0],[720.0,270.0,840.0,405.0,1165.0,480.0,1235.0,510.0],[840.0,270.0,960.0,405.0,850.0,480.0,970.0,510.0],[0.0,405.0,120.0,540.0,1100.0,480.0,1280.0,510.0],[120.0,405.0,240.0,540.0,1100.0,480.0,1280.0,510.0],[240.0,405.0,360.0,540.0,1030.0,480.0,1260.0,510.0],[360.0,405.0,480.0,540.0,1150.0,480.0,1250.0,510.0],[480.0,405.0,600.0,540.0,1140.0,480.0,1170.0,510.0],[600.0,405.0,720.0,540.0,1165.0,480.0,1235.0,510.0],[720.0,405.0,840.0,540.0,1165.0,480.0,1235.0,510.0],[840.0,405.0,960.0,540.0,860.0,480.0,965.0,510.0]]},{\"camera_id\":\"6\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,6666.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,1370.0,500.0,1490.0,530.0],[240.0,0.0,360.0,135.0,1390.0,500.0,1600.0,530.0],[360.0,0.0,480.0,135.0,1430.0,500.0,1590.0,530.0],[480.0,0.0,600.0,135.0,1360.0,500.0,1515.0,530.0],[600.0,0.0,720.0,135.0,0.0,370.0,480.0,420.0],[720.0,0.0,840.0,135.0,0.0,370.0,480.0,420.0],[840.0,0.0,960.0,135.0,0.0,370.0,480.0,420.0],[0.0,135.0,120.0,270.0,1250.0,370.0,150.0,505.0],[120.0,135.0,240.0,270.0,1210.0,480.0,1410.0,510.0],[240.0,135.0,360.0,270.0,1150.0,480.0,1320.0,510.0],[360.0,135.0,480.0,270.0,1090.0,480.0,1290.0,510.0],[480.0,135.0,600.0,270.0,1010.0,480.0,1200.0,510.0],[600.0,135.0,720.0,270.0,1070.0,480.0,1190.0,510.0],[720.0,135.0,840.0,270.0,6666.0,2222.0,7777.0,0.0],[840.0,135.0,960.0,270.0,6666.0,2222.0,8888.0,0.0],[0.0,270.0,120.0,405.0,1100.0,480.0,1310.0,510.0],[120.0,270.0,240.0,405.0,1050.0,480.0,1230.0,510.0],[240.0,270.0,360.0,405.0,1040.0,480.0,1210.0,510.0],[360.0,270.0,480.0,405.0,990.0,480.0,1180.0,510.0],[480.0,270.0,600.0,405.0,1000.0,480.0,1210.0,510.0],[600.0,270.0,720.0,405.0,1050.0,480.0,1170.0,510.0],[720.0,270.0,840.0,405.0,1115.0,480.0,1185.0,510.0],[840.0,270.0,960.0,405.0,800.0,480.0,920.0,510.0],[0.0,405.0,120.0,540.0,1030.0,480.0,1220.0,510.0],[120.0,405.0,240.0,540.0,1010.0,480.0,1250.0,510.0],[240.0,405.0,360.0,540.0,980.0,480.0,1210.0,510.0],[360.0,405.0,480.0,540.0,1100.0,480.0,1200.0,510.0],[480.0,405.0,600.0,540.0,1090.0,480.0,1120.0,510.0],[600.0,405.0,720.0,540.0,1115.0,480.0,1185.0,510.0],[720.0,405.0,840.0,540.0,1115.0,480.0,1185.0,510.0],[840.0,405.0,960.0,540.0,810.0,480.0,915.0,510.0]]},{\"camera_id\":\"7\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,7777.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,7777.0,1111.0,2222.0,0.0],[240.0,0.0,360.0,135.0,7777.0,1111.0,3333.0,0.0],[360.0,0.0,480.0,135.0,800.0,370.0,1450.0,440.0],[480.0,0.0,600.0,135.0,1350.0,370.0,1510.0,440.0],[600.0,0.0,720.0,135.0,900.0,300.0,1100.0,350.0],[720.0,0.0,840.0,135.0,7777.0,1111.0,8888.0,0.0],[840.0,0.0,960.0,135.0,7777.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,7777.0,2222.0,1111.0,0.0],[120.0,135.0,240.0,270.0,530.0,370.0,850.0,440.0],[240.0,135.0,360.0,270.0,530.0,370.0,850.0,440.0],[360.0,135.0,480.0,270.0,530.0,370.0,850.0,440.0],[480.0,135.0,600.0,270.0,555.0,400.0,690.0,460.0],[600.0,135.0,720.0,270.0,495.0,400.0,640.0,640.0],[720.0,135.0,840.0,270.0,860.0,420.0,940.0,540.0],[840.0,135.0,960.0,270.0,1300.0,540.0,1500.0,640.0],[0.0,270.0,120.0,405.0,480.0,405.0,530.0,540.0],[120.0,270.0,240.0,405.0,480.0,405.0,530.0,540.0],[240.0,270.0,360.0,405.0,480.0,405.0,530.0,540.0],[360.0,270.0,480.0,405.0,480.0,405.0,530.0,540.0],[480.0,270.0,600.0,405.0,480.0,405.0,530.0,540.0],[600.0,270.0,720.0,405.0,480.0,405.0,530.0,540.0],[720.0,270.0,840.0,405.0,480.0,405.0,530.0,540.0],[840.0,270.0,960.0,405.0,800.0,540.0,1280.0,640.0],[0.0,405.0,120.0,540.0,430.0,405.0,480.0,540.0],[120.0,405.0,240.0,540.0,400.0,405.0,450.0,540.0],[240.0,405.0,360.0,540.0,380.0,405.0,430.0,540.0],[360.0,405.0,480.0,540.0,350.0,405.0,400.0,540.0],[480.0,405.0,600.0,540.0,320.0,405.0,370.0,540.0],[600.0,405.0,720.0,540.0,270.0,405.0,340.0,540.0],[720.0,405.0,840.0,540.0,240.0,540.0,270.0,620.0],[840.0,405.0,960.0,540.0,240.0,540.0,270.0,620.0]]},{\"camera_id\":\"8\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,8888.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,8888.0,1111.0,2222.0,0.0],[240.0,0.0,360.0,135.0,8888.0,1111.0,3333.0,0.0],[360.0,0.0,480.0,135.0,495.0,300.0,640.0,350.0],[480.0,0.0,600.0,135.0,640.0,300.0,750.0,350.0],[600.0,0.0,720.0,135.0,750.0,300.0,900.0,350.0],[720.0,0.0,840.0,135.0,900.0,300.0,1100.0,350.0],[840.0,0.0,960.0,135.0,8888.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,100.0,505.0,240.0,585.0],[120.0,135.0,240.0,270.0,200.0,505.0,380.0,585.0],[240.0,135.0,360.0,270.0,380.0,505.0,480.0,585.0],[360.0,135.0,480.0,270.0,940.0,540.0,1020.0,620.0],[480.0,135.0,600.0,270.0,940.0,540.0,1020.0,620.0],[600.0,135.0,720.0,270.0,860.0,430.0,1070.0,480.0],[720.0,135.0,840.0,270.0,860.0,430.0,1070.0,480.0],[840.0,135.0,960.0,270.0,1100.0,400.0,1200.0,480.0],[0.0,270.0,120.0,405.0,240.0,540.0,270.0,620.0],[120.0,270.0,240.0,405.0,200.0,505.0,250.0,585.0],[240.0,270.0,360.0,405.0,240.0,505.0,270.0,585.0],[360.0,270.0,480.0,405.0,270.0,480.0,570.0,550.0],[480.0,270.0,600.0,405.0,570.0,480.0,1000.0,550.0],[600.0,270.0,720.0,405.0,1000.0,600.0,1100.0,680.0],[720.0,270.0,840.0,405.0,1100.0,600.0,1200.0,680.0],[840.0,270.0,960.0,405.0,1200.0,600.0,1300.0,680.0],[0.0,405.0,120.0,540.0,200.0,600.0,240.0,680.0],[120.0,405.0,240.0,540.0,240.0,600.0,480.0,680.0],[240.0,405.0,360.0,540.0,240.0,570.0,480.0,650.0],[360.0,405.0,480.0,540.0,270.0,600.0,570.0,680.0],[480.0,405.0,600.0,540.0,570.0,600.0,1000.0,680.0],[600.0,405.0,720.0,540.0,1000.0,600.0,1100.0,680.0],[720.0,405.0,840.0,540.0,1100.0,600.0,1200.0,680.0],[840.0,405.0,960.0,540.0,1200.0,600.0,1300.0,680.0]]}],\"camera1\":{\"rotate\":-30.0,\"tilt\":20.0},\"camera2\":{\"rotate\":-30.0,\"tilt\":-30.0},\"camera3\":{\"rotate\":130.0,\"tilt\":20.0},\"camera4\":{\"rotate\":0.0,\"tilt\":3.0},\"camera5\":{\"rotate\":3.0,\"tilt\":0.0},\"camera6\":{\"rotate\":10.0,\"tilt\":-10.0},\"camera7\":{\"rotate\":-10.0,\"tilt\":1.0},\"camera8\":{\"rotate\":0.0,\"tilt\":0.0},\"camera9\":{\"rotate\":0.0,\"tilt\":30.0}}");
                    //majorMethod.SetDRResultData("{\"machine\":{\"height\":0.0,\"degree\":18.344711482642523},\"data_array\":[0.2409992420438245,0.23294840356690572,\"\",[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0711:46:54.735306\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0711:46:54.762898\"],[0.9238728284835815,[0.03645606338977814,0.6383220553398132,0.11715854704380035,0.9462844133377075],\"walk\",\"2024-12-0711:46:54.719838\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0711:46:54.723343\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0711:46:54.768762\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0711:46:54.707165\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0711:46:54.820060\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0711:46:54.819418\"],[-9999.0,[-9999.0,-9999.0,-9999.0,-9999.0],\"Undetermined\",\"2024-12-0711:46:54.728386\"]],\"selected_data\":[0.9238728284835815,[0.03645606338977814,0.6383220553398132,0.11715854704380035,0.9462844133377075],\"walk\",2,\"2024-12-0711:46:54.719838\"],\"version\":\"v0.9\",\"timestamp\":1733543215074749,\"productName\":\"Zoo\",\"env\":\"local\",\"resolutionX\":960,\"resolutionY\":540,\"width\":678.14,\"height\":408.7,\"area_egg\":[{\"egg_id\":\"1\",\"position_x_y\":[640,400]},{\"egg_id\":\"2\",\"position_x_y\":[1200,400]},{\"egg_id\":\"3\",\"position_x_y\":[1600,400]},{\"egg_id\":\"5\",\"position_x_y\":[2640,320]},{\"egg_id\":\"8\",\"position_x_y\":[1460,320]},{\"egg_id\":\"14\",\"position_x_y\":[2240,320]},{\"egg_id\":\"15\",\"position_x_y\":[240,320]},{\"egg_id\":\"16\",\"position_x_y\":[800,200]},{\"egg_id\":\"91\",\"position_x_y\":[640,400]},{\"egg_id\":\"92\",\"position_x_y\":[800,330]},{\"egg_id\":\"93\",\"position_x_y\":[1200,380]},{\"egg_id\":\"94\",\"position_x_y\":[2240,380]},{\"egg_id\":\"96\",\"position_x_y\":[640,280]},{\"egg_id\":\"97\",\"position_x_y\":[800,280]},{\"egg_id\":\"98\",\"position_x_y\":[1100,400]},{\"egg_id\":\"99\",\"position_x_y\":[2240,320]}],\"camera_mapping\":[{\"camera_id\":\"1\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,555.0,370.0,690.0,430.0],[120.0,0.0,240.0,135.0,800.0,350.0,1000.0,400.0],[240.0,0.0,360.0,135.0,800.0,350.0,1000.0,400.0],[360.0,0.0,480.0,135.0,1000.0,350.0,1100.0,400.0],[480.0,0.0,600.0,135.0,870.0,370.0,1010.0,430.0],[600.0,0.0,720.0,135.0,1010.0,370.0,1150.0,430.0],[720.0,0.0,840.0,135.0,1120.0,370.0,1380.0,430.0],[840.0,0.0,960.0,135.0,1111.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,555.0,400.0,690.0,460.0],[120.0,135.0,240.0,270.0,690.0,415.0,860.0,470.0],[240.0,135.0,360.0,270.0,860.0,430.0,1070.0,480.0],[360.0,135.0,480.0,270.0,1070.0,430.0,1120.0,480.0],[480.0,135.0,600.0,270.0,1120.0,430.0,1270.0,480.0],[600.0,135.0,720.0,270.0,1195.0,430.0,1270.0,480.0],[720.0,135.0,840.0,270.0,1260.0,430.0,1520.0,480.0],[840.0,135.0,960.0,270.0,1520.0,430.0,1960.0,480.0],[0.0,270.0,120.0,405.0,940.0,540.0,1020.0,620.0],[120.0,270.0,240.0,405.0,690.0,450.0,860.0,500.0],[240.0,270.0,360.0,405.0,860.0,540.0,980.0,620.0],[360.0,270.0,480.0,405.0,980.0,540.0,1100.0,620.0],[480.0,270.0,600.0,405.0,1100.0,600.0,1200.0,680.0],[600.0,270.0,720.0,405.0,1200.0,600.0,1300.0,680.0],[720.0,270.0,840.0,405.0,1290.0,540.0,1480.0,620.0],[840.0,270.0,960.0,405.0,1480.0,540.0,1960.0,620.0],[0.0,405.0,120.0,540.0,240.0,505.0,270.0,585.0],[120.0,405.0,240.0,540.0,270.0,505.0,860.0,585.0],[240.0,405.0,360.0,540.0,860.0,540.0,980.0,620.0],[360.0,405.0,480.0,540.0,980.0,540.0,1100.0,620.0],[480.0,405.0,600.0,540.0,1100.0,540.0,1200.0,600.0],[600.0,405.0,720.0,540.0,1200.0,540.0,1430.0,620.0],[720.0,405.0,840.0,540.0,1430.0,600.0,1780.0,680.0],[840.0,405.0,960.0,540.0,1535.0,600.0,1720.0,680.0]]},{\"camera_id\":\"2\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,1800.0,480.0,1860.0,510.0],[120.0,0.0,240.0,135.0,1850.0,480.0,1950.0,510.0],[240.0,0.0,360.0,135.0,1940.0,480.0,2040.0,510.0],[360.0,0.0,480.0,135.0,2030.0,480.0,2130.0,510.0],[480.0,0.0,600.0,135.0,2100.0,470.0,2350.0,520.0],[600.0,0.0,720.0,135.0,2200.0,470.0,2400.0,520.0],[720.0,0.0,840.0,135.0,2222.0,1111.0,7777.0,0.0],[840.0,0.0,960.0,135.0,2222.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,1830.0,540.0,1910.0,570.0],[120.0,135.0,240.0,270.0,1830.0,560.0,1910.0,610.0],[240.0,135.0,360.0,270.0,1880.0,560.0,2100.0,610.0],[360.0,135.0,480.0,270.0,2200.0,590.0,2260.0,640.0],[480.0,135.0,600.0,270.0,2300.0,590.0,2360.0,640.0],[600.0,135.0,720.0,270.0,2360.0,590.0,2580.0,640.0],[720.0,135.0,840.0,270.0,2580.0,590.0,2640.0,640.0],[840.0,135.0,960.0,270.0,2620.0,590.0,2660.0,640.0],[0.0,270.0,120.0,405.0,1830.0,480.0,1910.0,510.0],[120.0,270.0,240.0,405.0,1910.0,530.0,2000.0,580.0],[240.0,270.0,360.0,405.0,1990.0,530.0,2090.0,580.0],[360.0,270.0,480.0,405.0,2160.0,530.0,2220.0,580.0],[480.0,270.0,600.0,405.0,2200.0,530.0,2360.0,580.0],[600.0,270.0,720.0,405.0,2345.0,530.0,2490.0,580.0],[720.0,270.0,840.0,405.0,2475.0,530.0,2635.0,580.0],[840.0,270.0,960.0,405.0,2650.0,560.0,2690.0,610.0],[0.0,405.0,120.0,540.0,1630.0,480.0,1800.0,510.0],[120.0,405.0,240.0,540.0,1750.0,530.0,1930.0,580.0],[240.0,405.0,360.0,540.0,1900.0,530.0,2090.0,580.0],[360.0,405.0,480.0,540.0,2160.0,560.0,2280.0,610.0],[480.0,405.0,600.0,540.0,2300.0,560.0,2360.0,610.0],[600.0,405.0,720.0,540.0,2345.0,560.0,2490.0,610.0],[720.0,405.0,840.0,540.0,2475.0,560.0,2635.0,610.0],[840.0,405.0,960.0,540.0,2650.0,560.0,2690.0,610.0]]},{\"camera_id\":\"3\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,3333.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,2560.0,500.0,2590.0,530.0],[240.0,0.0,360.0,135.0,2320.0,500.0,2460.0,530.0],[360.0,0.0,480.0,135.0,2000.0,500.0,2160.0,530.0],[480.0,0.0,600.0,135.0,1800.0,500.0,1940.0,530.0],[600.0,0.0,720.0,135.0,1820.0,500.0,1860.0,530.0],[720.0,0.0,840.0,135.0,1760.0,500.0,1840.0,530.0],[840.0,0.0,960.0,135.0,3333.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,3333.0,2222.0,1111.0,0.0],[120.0,135.0,240.0,270.0,2240.0,480.0,2370.0,510.0],[240.0,135.0,360.0,270.0,2310.0,480.0,2430.0,510.0],[360.0,135.0,480.0,270.0,2380.0,480.0,2460.0,510.0],[480.0,135.0,600.0,270.0,2080.0,480.0,2230.0,510.0],[600.0,135.0,720.0,270.0,2080.0,480.0,2180.0,510.0],[720.0,135.0,840.0,270.0,1830.0,480.0,2000.0,510.0],[840.0,135.0,960.0,270.0,1800.0,480.0,1860.0,510.0],[0.0,270.0,120.0,405.0,3333.0,3333.0,1111.0,0.0],[120.0,270.0,240.0,405.0,2240.0,480.0,2320.0,510.0],[240.0,270.0,360.0,405.0,2300.0,480.0,2380.0,510.0],[360.0,270.0,480.0,405.0,2260.0,480.0,2360.0,510.0],[480.0,270.0,600.0,405.0,2130.0,480.0,2260.0,510.0],[600.0,270.0,720.0,405.0,2080.0,480.0,2260.0,510.0],[720.0,270.0,840.0,405.0,1960.0,480.0,2140.0,510.0],[840.0,270.0,960.0,405.0,2070.0,480.0,2130.0,510.0],[0.0,405.0,120.0,540.0,3333.0,4444.0,1111.0,0.0],[120.0,405.0,240.0,540.0,2240.0,480.0,2320.0,510.0],[240.0,405.0,360.0,540.0,2280.0,480.0,2360.0,510.0],[360.0,405.0,480.0,540.0,2230.0,480.0,2350.0,510.0],[480.0,405.0,600.0,540.0,2285.0,480.0,2320.0,510.0],[600.0,405.0,720.0,540.0,2160.0,480.0,2260.0,510.0],[720.0,405.0,840.0,540.0,2080.0,480.0,2200.0,510.0],[840.0,405.0,960.0,540.0,2180.0,480.0,2220.0,510.0]]},{\"camera_id\":\"4\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,2350.0,510.0,2440.0,550.0],[120.0,0.0,240.0,135.0,2000.0,510.0,2180.0,550.0],[240.0,0.0,360.0,135.0,1960.0,510.0,2040.0,550.0],[360.0,0.0,480.0,135.0,1960.0,510.0,2040.0,550.0],[480.0,0.0,600.0,135.0,1960.0,510.0,2040.0,550.0],[600.0,0.0,720.0,135.0,1860.0,510.0,2000.0,550.0],[720.0,0.0,840.0,135.0,1760.0,510.0,1890.0,550.0],[840.0,0.0,960.0,135.0,4444.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,2250.0,460.0,2350.0,510.0],[120.0,135.0,240.0,270.0,2580.0,590.0,2640.0,640.0],[240.0,135.0,360.0,270.0,2100.0,460.0,2250.0,510.0],[360.0,135.0,480.0,270.0,1980.0,460.0,2060.0,510.0],[480.0,135.0,600.0,270.0,1960.0,510.0,2040.0,550.0],[600.0,135.0,720.0,270.0,1960.0,460.0,2040.0,510.0],[720.0,135.0,840.0,270.0,1960.0,460.0,2040.0,510.0],[840.0,135.0,960.0,270.0,4444.0,2222.0,8888.0,0.0],[0.0,270.0,120.0,405.0,2350.0,460.0,2450.0,510.0],[120.0,270.0,240.0,405.0,2300.0,480.0,2380.0,510.0],[240.0,270.0,360.0,405.0,2150.0,460.0,2250.0,510.0],[360.0,270.0,480.0,405.0,2040.0,460.0,2120.0,510.0],[480.0,270.0,600.0,405.0,1960.0,460.0,2040.0,510.0],[600.0,270.0,720.0,405.0,2000.0,460.0,2150.0,510.0],[720.0,270.0,840.0,405.0,1960.0,460.0,2040.0,510.0],[840.0,270.0,960.0,405.0,1960.0,460.0,2040.0,510.0],[0.0,405.0,120.0,540.0,2250.0,430.0,2350.0,480.0],[120.0,405.0,240.0,540.0,2150.0,430.0,2250.0,480.0],[240.0,405.0,360.0,540.0,2100.0,430.0,2300.0,480.0],[360.0,405.0,480.0,540.0,2180.0,430.0,2280.0,480.0],[480.0,405.0,600.0,540.0,2160.0,430.0,2260.0,480.0],[600.0,405.0,720.0,540.0,2160.0,430.0,2260.0,480.0],[720.0,405.0,840.0,540.0,2000.0,430.0,2200.0,480.0],[840.0,405.0,960.0,540.0,2000.0,430.0,2200.0,480.0]]},{\"camera_id\":\"5\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,5555.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,1420.0,500.0,1540.0,530.0],[240.0,0.0,360.0,135.0,1440.0,500.0,1650.0,530.0],[360.0,0.0,480.0,135.0,1480.0,500.0,1640.0,530.0],[480.0,0.0,600.0,135.0,1410.0,500.0,1565.0,530.0],[600.0,0.0,720.0,135.0,1165.0,500.0,1300.0,530.0],[720.0,0.0,840.0,135.0,5555.0,1111.0,7777.0,0.0],[840.0,0.0,960.0,135.0,780.0,500.0,900.0,530.0],[0.0,135.0,120.0,270.0,5555.0,2222.0,1111.0,0.0],[120.0,135.0,240.0,270.0,1260.0,480.0,1460.0,510.0],[240.0,135.0,360.0,270.0,1200.0,480.0,1370.0,510.0],[360.0,135.0,480.0,270.0,1140.0,480.0,1340.0,510.0],[480.0,135.0,600.0,270.0,1060.0,480.0,1250.0,510.0],[600.0,135.0,720.0,270.0,1120.0,480.0,1240.0,510.0],[720.0,135.0,840.0,270.0,5555.0,2222.0,7777.0,0.0],[840.0,135.0,960.0,270.0,825.0,480.0,1040.0,510.0],[0.0,270.0,120.0,405.0,1100.0,480.0,1280.0,510.0],[120.0,270.0,240.0,405.0,1100.0,480.0,1280.0,510.0],[240.0,270.0,360.0,405.0,1090.0,480.0,1260.0,510.0],[360.0,270.0,480.0,405.0,1040.0,480.0,1230.0,510.0],[480.0,270.0,600.0,405.0,1050.0,480.0,1260.0,510.0],[600.0,270.0,720.0,405.0,1100.0,480.0,1220.0,510.0],[720.0,270.0,840.0,405.0,1165.0,480.0,1235.0,510.0],[840.0,270.0,960.0,405.0,850.0,480.0,970.0,510.0],[0.0,405.0,120.0,540.0,1100.0,480.0,1280.0,510.0],[120.0,405.0,240.0,540.0,1100.0,480.0,1280.0,510.0],[240.0,405.0,360.0,540.0,1030.0,480.0,1260.0,510.0],[360.0,405.0,480.0,540.0,1150.0,480.0,1250.0,510.0],[480.0,405.0,600.0,540.0,1140.0,480.0,1170.0,510.0],[600.0,405.0,720.0,540.0,1165.0,480.0,1235.0,510.0],[720.0,405.0,840.0,540.0,1165.0,480.0,1235.0,510.0],[840.0,405.0,960.0,540.0,860.0,480.0,965.0,510.0]]},{\"camera_id\":\"6\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,6666.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,1370.0,500.0,1490.0,530.0],[240.0,0.0,360.0,135.0,1390.0,500.0,1600.0,530.0],[360.0,0.0,480.0,135.0,1430.0,500.0,1590.0,530.0],[480.0,0.0,600.0,135.0,1360.0,500.0,1515.0,530.0],[600.0,0.0,720.0,135.0,0.0,370.0,480.0,420.0],[720.0,0.0,840.0,135.0,0.0,370.0,480.0,420.0],[840.0,0.0,960.0,135.0,0.0,370.0,480.0,420.0],[0.0,135.0,120.0,270.0,1250.0,370.0,150.0,505.0],[120.0,135.0,240.0,270.0,1210.0,480.0,1410.0,510.0],[240.0,135.0,360.0,270.0,1150.0,480.0,1320.0,510.0],[360.0,135.0,480.0,270.0,1090.0,480.0,1290.0,510.0],[480.0,135.0,600.0,270.0,1010.0,480.0,1200.0,510.0],[600.0,135.0,720.0,270.0,1070.0,480.0,1190.0,510.0],[720.0,135.0,840.0,270.0,6666.0,2222.0,7777.0,0.0],[840.0,135.0,960.0,270.0,6666.0,2222.0,8888.0,0.0],[0.0,270.0,120.0,405.0,1100.0,480.0,1310.0,510.0],[120.0,270.0,240.0,405.0,1050.0,480.0,1230.0,510.0],[240.0,270.0,360.0,405.0,1040.0,480.0,1210.0,510.0],[360.0,270.0,480.0,405.0,990.0,480.0,1180.0,510.0],[480.0,270.0,600.0,405.0,1000.0,480.0,1210.0,510.0],[600.0,270.0,720.0,405.0,1050.0,480.0,1170.0,510.0],[720.0,270.0,840.0,405.0,1115.0,480.0,1185.0,510.0],[840.0,270.0,960.0,405.0,800.0,480.0,920.0,510.0],[0.0,405.0,120.0,540.0,1030.0,480.0,1220.0,510.0],[120.0,405.0,240.0,540.0,1010.0,480.0,1250.0,510.0],[240.0,405.0,360.0,540.0,980.0,480.0,1210.0,510.0],[360.0,405.0,480.0,540.0,1100.0,480.0,1200.0,510.0],[480.0,405.0,600.0,540.0,1090.0,480.0,1120.0,510.0],[600.0,405.0,720.0,540.0,1115.0,480.0,1185.0,510.0],[720.0,405.0,840.0,540.0,1115.0,480.0,1185.0,510.0],[840.0,405.0,960.0,540.0,810.0,480.0,915.0,510.0]]},{\"camera_id\":\"7\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,7777.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,7777.0,1111.0,2222.0,0.0],[240.0,0.0,360.0,135.0,7777.0,1111.0,3333.0,0.0],[360.0,0.0,480.0,135.0,800.0,370.0,1450.0,440.0],[480.0,0.0,600.0,135.0,1350.0,370.0,1510.0,440.0],[600.0,0.0,720.0,135.0,900.0,300.0,1100.0,350.0],[720.0,0.0,840.0,135.0,7777.0,1111.0,8888.0,0.0],[840.0,0.0,960.0,135.0,7777.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,7777.0,2222.0,1111.0,0.0],[120.0,135.0,240.0,270.0,530.0,370.0,850.0,440.0],[240.0,135.0,360.0,270.0,530.0,370.0,850.0,440.0],[360.0,135.0,480.0,270.0,530.0,370.0,850.0,440.0],[480.0,135.0,600.0,270.0,555.0,400.0,690.0,460.0],[600.0,135.0,720.0,270.0,615.0,400.0,760.0,640.0],[720.0,135.0,840.0,270.0,860.0,420.0,940.0,540.0],[840.0,135.0,960.0,270.0,1300.0,540.0,1500.0,640.0],[0.0,270.0,120.0,405.0,680.0,405.0,800.0,540.0],[120.0,270.0,240.0,405.0,730.0,405.0,850.0,540.0],[240.0,270.0,360.0,405.0,780.0,405.0,900.0,540.0],[360.0,270.0,480.0,405.0,780.0,405.0,900.0,540.0],[480.0,270.0,600.0,405.0,480.0,405.0,530.0,540.0],[600.0,270.0,720.0,405.0,480.0,405.0,530.0,540.0],[720.0,270.0,840.0,405.0,480.0,405.0,530.0,540.0],[840.0,270.0,960.0,405.0,800.0,540.0,1280.0,640.0],[0.0,405.0,120.0,540.0,430.0,405.0,480.0,540.0],[120.0,405.0,240.0,540.0,400.0,465.0,450.0,600.0],[240.0,405.0,360.0,540.0,380.0,405.0,430.0,540.0],[360.0,405.0,480.0,540.0,350.0,405.0,400.0,540.0],[480.0,405.0,600.0,540.0,320.0,405.0,370.0,540.0],[600.0,405.0,720.0,540.0,270.0,405.0,340.0,540.0],[720.0,405.0,840.0,540.0,240.0,540.0,270.0,620.0],[840.0,405.0,960.0,540.0,240.0,540.0,270.0,620.0]]},{\"camera_id\":\"8\",\"camera_to_display_x_y\":[[0.0,0.0,120.0,135.0,8888.0,1111.0,1111.0,0.0],[120.0,0.0,240.0,135.0,8888.0,1111.0,2222.0,0.0],[240.0,0.0,360.0,135.0,8888.0,1111.0,3333.0,0.0],[360.0,0.0,480.0,135.0,495.0,300.0,640.0,350.0],[480.0,0.0,600.0,135.0,640.0,300.0,750.0,350.0],[600.0,0.0,720.0,135.0,750.0,300.0,900.0,350.0],[720.0,0.0,840.0,135.0,900.0,300.0,1100.0,350.0],[840.0,0.0,960.0,135.0,8888.0,1111.0,8888.0,0.0],[0.0,135.0,120.0,270.0,100.0,505.0,240.0,585.0],[120.0,135.0,240.0,270.0,200.0,505.0,380.0,585.0],[240.0,135.0,360.0,270.0,380.0,505.0,480.0,585.0],[360.0,135.0,480.0,270.0,615.0,400.0,760.0,640.0],[480.0,135.0,600.0,270.0,615.0,400.0,760.0,640.0],[600.0,135.0,720.0,270.0,860.0,430.0,1070.0,480.0],[720.0,135.0,840.0,270.0,860.0,430.0,1070.0,480.0],[840.0,135.0,960.0,270.0,1100.0,400.0,1200.0,480.0],[0.0,270.0,120.0,405.0,240.0,540.0,270.0,620.0],[120.0,270.0,240.0,405.0,200.0,505.0,250.0,585.0],[240.0,270.0,360.0,405.0,240.0,505.0,270.0,585.0],[360.0,270.0,480.0,405.0,270.0,480.0,570.0,550.0],[480.0,270.0,600.0,405.0,570.0,480.0,1000.0,550.0],[600.0,270.0,720.0,405.0,1000.0,600.0,1100.0,680.0],[720.0,270.0,840.0,405.0,1100.0,600.0,1200.0,680.0],[840.0,270.0,960.0,405.0,1200.0,600.0,1300.0,680.0],[0.0,405.0,120.0,540.0,200.0,600.0,240.0,680.0],[120.0,405.0,240.0,540.0,240.0,600.0,480.0,680.0],[240.0,405.0,360.0,540.0,240.0,570.0,480.0,650.0],[360.0,405.0,480.0,540.0,270.0,600.0,570.0,680.0],[480.0,405.0,600.0,540.0,570.0,600.0,1000.0,680.0],[600.0,405.0,720.0,540.0,1000.0,600.0,1100.0,680.0],[720.0,405.0,840.0,540.0,1100.0,600.0,1200.0,680.0],[840.0,405.0,960.0,540.0,1200.0,600.0,1300.0,680.0]]}],\"camera1\":{\"rotate\":-30.0,\"tilt\":20.0},\"camera2\":{\"rotate\":-30.0,\"tilt\":-30.0},\"camera3\":{\"rotate\":130.0,\"tilt\":20.0},\"camera4\":{\"rotate\":0.0,\"tilt\":3.0},\"camera5\":{\"rotate\":3.0,\"tilt\":0.0},\"camera6\":{\"rotate\":10.0,\"tilt\":-10.0},\"camera7\":{\"rotate\":-10.0,\"tilt\":1.0},\"camera8\":{\"rotate\":0.0,\"tilt\":0.0},\"camera9\":{\"rotate\":0.0,\"tilt\":30.0}}");

                    //核心計算
                    majorMethod.SetDTResultData(AR_Core_Computing());
                    
                    bgWorker?.ReportProgress(0);
                }

                // 每 0.01s 檢查一次，大約是 10fps(Frames Per Second)，每秒檢查 10 次
                Thread.Sleep(100);
            }
        }
        public static void ProgressChangedHandler(object? sender, ProgressChangedEventArgs e)
        {
            // 在此對外進行工作內容報告
            //mainWin.WriteMutiDataReceiveLog(majorMethod.DRResultData);
        }
        
        public static void RunWorkerCompletedHandler(object? sender, RunWorkerCompletedEventArgs e)
        {
            // 當 Worker 執行完畢後，進行資源回收與關閉
            client.Dispose();
        }
        private static string AR_Core_Computing()
        {
            long AR_Core_ComputingTimestamp = (long)(DateTime.Now.ToUniversalTime() - unixEpoch).TotalMicroseconds;
            TextLog.WriteLog("AR_Core_Computing_Input_timeStamp : " + AR_Core_ComputingTimestamp.ToString() + ", " + majorMethod.GetDRResultData().ToString());
            // http://127.0.0.1:5000/detect_module_api/area
            // http://127.0.0.1:5000/detect_module_api/localization
            // http://127.0.0.1:5000/detect_module_api/object_detection
            dataCollectionObject = JsonConvert.DeserializeObject<DataCollectionObject>(majorMethod.GetDRResultData());

            // 新增資料至緩衝區
            majorMethod.dataBuffer.Add(dataCollectionObject);

            // 當緩衝區滿 4 筆資料時，開始處理
            /*
            if (majorMethod.dataBuffer.Count == 10)
            {
                dataCollectionObject = ProcessData(dataCollectionObject);

                majorMethod.dataBuffer[0] = majorMethod.dataBuffer[1];
                majorMethod.dataBuffer[1] = majorMethod.dataBuffer[2];
                majorMethod.dataBuffer[2] = majorMethod.dataBuffer[3];
                majorMethod.dataBuffer[3] = majorMethod.dataBuffer[4];
                majorMethod.dataBuffer[4] = majorMethod.dataBuffer[5];
                majorMethod.dataBuffer[5] = majorMethod.dataBuffer[6];
                majorMethod.dataBuffer[6] = majorMethod.dataBuffer[7];
                majorMethod.dataBuffer[7] = majorMethod.dataBuffer[8];
                majorMethod.dataBuffer[8] = majorMethod.dataBuffer[9];
                majorMethod.dataBuffer.RemoveAt(9);
            }
            */

            // 索取機構資訊，旋轉角度範圍為 -30~110，高度範圍為 0~70cm
            // 全視野左上角座標(0, 0)時，旋轉角度為-30，高度為 70cm
            // 全視野左上角座標(0, 100)時，旋轉角度為-30，高度為 0cm
            // 全視野左上角座標(2920, 0)時，旋轉角度為110，高度為 70cm
            // 全視野左上角座標(2920, 640)時，旋轉角度為110，高度為 0cm
            MechanismData(dataCollectionObject.Machine);
            dataArray = dataCollectionObject.DataArray;

            // 判斷哪一台攝影機的信賴率最高，並記錄在 LiveCamId，熊的姿態
            Confidence(dataArray);

            // TODO 相機映射到透顯全視野座標
            CameraMapping(dataCollectionObject.CameraMapping, LiveCamId);

            mapRotate();

            string json = JsonConvert.SerializeObject(UI_Json(), Formatting.Indented).Replace("\r\n", "").Replace(" ", "");
            // 加入LOG
            TextLog.WriteLog("AR_Core_Computing_Output_timeStamp : " + ((long)(DateTime.Now.ToUniversalTime() - unixEpoch).TotalMicroseconds).ToString() + ", " + json);

            return json;
        }
        static List<(double XMin, double XMax, double YMin, double YMax, double TransX, double TransY)> mappings = new()
        {
            (0.45, 0.5, 0.47, 0.56, 0.427, 0.567), // O
            (0.49, 0.55, 0.56, 0.65, 0.35, 0.52), // P

            (0.3, 0.42, 0.18, 0.3, 0.85, 0.68), // 1
            (0.4, 0.5, 0.2, 0.3, 0.78, 0.55), // 2
            (0.47, 0.55, 0.2, 0.3, 0.75, 0.43), // 3
            (0.25, 0.35, 0.25, 0.33, 0.77, 0.78), // 4
            (0.35, 0.45, 0.27, 0.33, 0.73, 0.68), // 5
            (0.45, 0.51, 0.28, 0.33, 0.7, 0.55), // 6
            (0.5, 0.58, 0.28, 0.36, 0.65, 0.43), // 7
            (0.55, 0.65, 0.32, 0.41, 0.6, 0.33), // 8
            (0.65, 0.72, 0.35, 0.42, 0.58, 0.18), // 9

            (0.7, 0.8, 0.3, 0.4, 0.6, 0.1), // A
            (0.7, 0.8, 0.38, 0.45, 0.5, 0.1), // B
            (0.7, 0.8, 0.45, 0.53, 0.4, 0.1), // C
            (0.685, 0.78, 0.53, 0.6, 0.35, 0.18), // D
            (0.68, 0.73, 0.44, 0.52, 0.45, 0.18), // E
            (0.59, 0.67, 0.41, 0.48, 0.5, 0.33), // F
            (0.6, 0.7, 0.49, 0.56, 0.4, 0.33), // G
            (0.62, 0.72, 0.57, 0.65, 0.3, 0.33), //H
            (0.58, 0.65, 0.65, 0.73, 0.23, 0.43), // I
            (0.55, 0.64, 0.55, 0.65, 0.32, 0.43), // J
            (0.53, 0.64, 0.47, 0.55, 0.45, 0.43), // K
            (0.51, 0.64, 0.36, 0.47, 0.55, 0.43), // L
            (0.43, 0.52, 0.33, 0.41, 0.62, 0.52), // M
            (0.45, 0.53, 0.41, 0.47, 0.54, 0.52), // N

            (0.5, 0.58, 0.65, 0.75, 0.22, 0.52), // Q
            (0.47, 0.53, 0.7, 0.8, 0.18, 0.66), // R
            (0.31, 0.39, 0.42, 0.52, 0.52, 0.78), // S
            (0.33, 0.42, 0.37, 0.44, 0.61, 0.73), // T
            (0.3, 0.39, 0.33, 0.37, 0.69, 0.75), // U
            (0.38, 0.43, 0.33, 0.39, 0.67, 0.7), // V
            (0.39, 0.46, 0.41, 0.47, 0.56, 0.7), // W
            (0.35, 0.4, 0.47, 0.56, 0.48, 0.7), // X
            (0.4, 0.45, 0.48, 0.53, 0.46, 0.66), // Y
            (0.44, 0.5, 0.54, 0.63, 0.38, 0.66), // Z

            (0.45, 0.5, 0.63, 0.7, 0.28, 0.66) // 0

        };
        private static DataCollectionObject ProcessData(DataCollectionObject thisSecondDataCollectionObject)
        {
            indexTemp = 0;
            if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) == -9999.0 || Convert.ToDouble(dataCollectionObject.SelectedData[0]) == -8888.0)
            {
                majorMethod.arTime++;
            }
            else
            {
                majorMethod.arTime = 0;
            }
            // 1127 Log Mark
            TextLog.WriteLog("majorMethod.arTime : " + majorMethod.arTime.ToString());
            if (("2".Equals(thisSecondDataCollectionObject.SelectedData[3].ToString()) && (Convert.ToDouble(thisSecondDataCollectionObject.SelectedData[1].ToString().Split(",")[0].Replace("[", "").Replace("\r", "").Replace("\n", "").Replace(" ", "")) < 0.5 && Convert.ToDouble(thisSecondDataCollectionObject.SelectedData[1].ToString().Split(",")[1].Replace("[", "").Replace("\r", "").Replace("\n", "").Replace(" ", "")) < 0.125))
                || ("3".Equals(thisSecondDataCollectionObject.SelectedData[3].ToString()) && (Convert.ToDouble(thisSecondDataCollectionObject.SelectedData[1].ToString().Split(",")[0].Replace("[", "").Split(",")[0].Replace("\r", "").Replace("\n", "").Replace(" ", "")) < 0.2 && Convert.ToDouble(thisSecondDataCollectionObject.SelectedData[1].ToString().Split(",")[1].Replace("[", "").Replace("\r", "").Replace("\n", "").Replace(" ", "")) < 0.125)))
            {
                TextLog.WriteLog("(1119_辨識已處理)最新的Index : " + thisSecondDataCollectionObject.SelectedData[3].ToString() + ", Conf : " + thisSecondDataCollectionObject.SelectedData[0].ToString()
                    + ", 但是BBOX不合理 : " + thisSecondDataCollectionObject.SelectedData[1].ToString());
            }
            else
            {
                // 判斷四筆資料內，只要有三筆資料有是一樣的，就視為正確資料
                if (thisSecondDataCollectionObject.SelectedData[3].ToString().Equals(majorMethod.dataBuffer[2].SelectedData[3].ToString()))
                {
                    indexTemp++;
                }
                if (thisSecondDataCollectionObject.SelectedData[3].ToString().Equals(majorMethod.dataBuffer[5].SelectedData[3].ToString()))
                {
                    indexTemp++;
                }
                if (thisSecondDataCollectionObject.SelectedData[3].ToString().Equals(majorMethod.dataBuffer[8].SelectedData[3].ToString()))
                {
                    indexTemp++;
                }
                if (indexTemp > 2)
                {
                    majorMethod.lastValidData = thisSecondDataCollectionObject;
                    // 1127 Log Mark
                    TextLog.WriteLog("最新的Index : " + thisSecondDataCollectionObject.SelectedData[3].ToString() + ", Conf : " + thisSecondDataCollectionObject.SelectedData[0].ToString());
                    return thisSecondDataCollectionObject;
                }
                // 1127 Log Mark
                
                else
                {
                    if (majorMethod != null && majorMethod.lastValidData != null && majorMethod.lastValidData.SelectedData != null)
                    {
                        TextLog.WriteLog("這是第" + indexTemp.ToString() + "次，保留上次的Index : " + majorMethod.lastValidData.SelectedData[3].ToString() + ", Conf : " + majorMethod.lastValidData.SelectedData[3].ToString()
                        + "這次的(尚未累積滿3次)Index : " + thisSecondDataCollectionObject.SelectedData[3].ToString() + ", Conf : " + thisSecondDataCollectionObject.SelectedData[0].ToString());
                    }
                }
                
            }
            
            return majorMethod.lastValidData;
        }

        private static void mapRotate()
        {
            // x′ = xcos(θ) − ysin(θ)
            // y′ = xsin(θ) + ycos(θ)
            mapRotateX = -1;
            mapRotateY = -1;
            confidenceIndex = 0.0;
            LiveCamId = "1";
            if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) != -9999.0 && Convert.ToDouble(dataCollectionObject.SelectedData[0]) != -8888.0)
            {
                if ("8".Equals(dataCollectionObject.SelectedData[3].ToString()))
                {
                    mapRotateX = 0.213; // x * 960 430
                    mapRotateY = 0.63; // (Y)*540 140
                }
                else
                {
                    confidenceIndex = Convert.ToDouble(dataCollectionObject.SelectedData[0]);
                    LiveCamId = (Convert.ToInt32(dataCollectionObject.SelectedData[3]) + 1).ToString();
                    BearMode = dataCollectionObject.SelectedData[2].ToString();

                    if (Convert.ToDouble(dataCollectionObject.DataArray[0]) < 0 || Convert.ToDouble(dataCollectionObject.DataArray[0]) > 1
                        || Convert.ToDouble(dataCollectionObject.DataArray[1]) < 0 || Convert.ToDouble(dataCollectionObject.DataArray[1]) > 1)
                    {
                        // 1127 Log Mark
                        TextLog.WriteLog("小地圖ERROR，dataCollectionObject.DataArray[0] = " + dataCollectionObject.DataArray[0].ToString() + "，dataCollectionObject.DataArray[1] = " + dataCollectionObject.DataArray[1].ToString());
                        if (majorMethod != null && majorMethod.lastValidData != null && majorMethod.lastValidData.DataArray != null)
                        {
                            dataCollectionObject.DataArray[0] = majorMethod.lastValidData.DataArray[0];
                            dataCollectionObject.DataArray[1] = majorMethod.lastValidData.DataArray[1];
                        }
                    }
                    Transform(Convert.ToDouble(dataCollectionObject.DataArray[0]), Convert.ToDouble(dataCollectionObject.DataArray[1]));
                }
            }
        }

        private static void Transform(double x, double y)
        {
            flag = true;
            foreach (var map in mappings)
            {
                if (x >= map.XMin && x <= map.XMax && y >= map.YMin && y <= map.YMax)
                {
                    flag = false;
                    mapRotateX = map.TransX;
                    mapRotateY = map.TransY;
                    // 1127 Log Mark
                    TextLog.WriteLog("原本 RatioX = " + x.ToString() + ", 原本 RatioY = " + y.ToString() + ", 轉換後 mapRatioX = " + mapRotateX.ToString() + ", 轉換後 mapRatioY = " + mapRotateY.ToString());
                }
            }
            if (flag)
            {
                mapRotateX = -1;
                mapRotateY = -1;
                // 1127 Log Mark
                TextLog.WriteLog("原本 RatioX = " + x.ToString() + ", 原本 RatioY = " + y.ToString() + ", 轉換後 mapRatioX = " + mapRotateX.ToString() + ", 轉換後 mapRatioY = " + mapRotateY.ToString());
            }
        }

        public static string RecordData()
        {
            string json = JsonConvert.SerializeObject(UI_Json(), Formatting.Indented).Replace("\r\n", "").Replace(" ", "");
            // 加入LOG
            // 1127 Log Mark
            TextLog.WriteLog("AR_Core_Computing_Record : " + json);

            return json;
        }

        private static void CameraMapping(List<CameraMapping> cameraMappings, string LiveCamID)
        {
            BearLeftTopX = -1;
            BearLeftTopY = -1;
            BearRightBottomX = -1;
            BearRightBottomY = -1;
            if ("1".Equals(ScreenMode) && !"".Equals(dataCollectionObject.SelectedData[3]))
            {
                switch (Convert.ToInt32(dataCollectionObject.SelectedData[3]))
                {
                    // 1 號相機
                    case 0:
                        for (int i = 0; i < cameraMappings[0].CameraToDisplayXY.Count; i++)
                        {
                            if (cameraBearX2 >= cameraMappings[0].CameraToDisplayXY[i][0]
                                && cameraBearX2 <= cameraMappings[0].CameraToDisplayXY[i][2]
                                && cameraBearY2 >= cameraMappings[0].CameraToDisplayXY[i][1]
                                && cameraBearY2 <= cameraMappings[0].CameraToDisplayXY[i][3])
                            {
                                BearRightBottomX = Convert.ToInt32(cameraMappings[0].CameraToDisplayXY[i][6]
                                    - (cameraMappings[0].CameraToDisplayXY[i][6] - cameraMappings[0].CameraToDisplayXY[i][4])
                                    * (cameraMappings[0].CameraToDisplayXY[i][2] - cameraBearX2)
                                    / (cameraMappings[0].CameraToDisplayXY[i][2] - cameraMappings[0].CameraToDisplayXY[i][0])
                                    );
                                BearRightBottomY = Convert.ToInt32(cameraMappings[0].CameraToDisplayXY[i][7]
                                    - (cameraMappings[0].CameraToDisplayXY[i][7] - cameraMappings[0].CameraToDisplayXY[i][5])
                                    * (cameraMappings[0].CameraToDisplayXY[i][3] - cameraBearY2)
                                    / (cameraMappings[0].CameraToDisplayXY[i][3] - cameraMappings[0].CameraToDisplayXY[i][1])
                                    );
                                if ((i > 3 && i < 8) || i == 12 || i == 13 || i == 15 || i == 21 || i == 23)
                                {
                                    ScreenMode = "0";
                                    // 1127 Log Mark
                                    TextLog.WriteLog("Camera 1 : 特殊演算法，i = " + i.ToString());
                                }
                                //BearLeftTopX = BearRightBottomX - cameraBearWidth;
                                //BearLeftTopY = BearRightBottomY - cameraBearHeight;
                                BearLeftTopX = Pose(BearRightBottomX, "X");
                                BearLeftTopY = Pose(BearRightBottomY, "Y");
                                // 1127 Log Mark
                                TextLog.WriteLog("Camera 1 : " + majorMethod.GetDRResultData().ToString());
                            }
                        }
                        break;
                    // 2 號相機
                    case 1:
                        for (int i = 0; i < cameraMappings[1].CameraToDisplayXY.Count; i++)
                        {
                            if (cameraBearX2 >= cameraMappings[1].CameraToDisplayXY[i][0]
                                && cameraBearX2 <= cameraMappings[1].CameraToDisplayXY[i][2]
                                && cameraBearY2 >= cameraMappings[1].CameraToDisplayXY[i][1]
                                && cameraBearY2 <= cameraMappings[1].CameraToDisplayXY[i][3])
                            {
                                BearRightBottomX = Convert.ToInt32(cameraMappings[1].CameraToDisplayXY[i][6]
                                    - (cameraMappings[1].CameraToDisplayXY[i][6] - cameraMappings[1].CameraToDisplayXY[i][4])
                                    * (cameraMappings[1].CameraToDisplayXY[i][2] - cameraBearX2)
                                    / (cameraMappings[1].CameraToDisplayXY[i][2] - cameraMappings[1].CameraToDisplayXY[i][0])
                                    );
                                BearRightBottomY = Convert.ToInt32(cameraMappings[1].CameraToDisplayXY[i][7]
                                    - (cameraMappings[1].CameraToDisplayXY[i][7] - cameraMappings[1].CameraToDisplayXY[i][5])
                                    * (cameraMappings[1].CameraToDisplayXY[i][3] - cameraBearY2)
                                    / (cameraMappings[1].CameraToDisplayXY[i][3] - cameraMappings[1].CameraToDisplayXY[i][1])
                                    );
                                if (i == 0 || i == 8 || i == 14 || i == 15 || i == 16 || i == 23 || i == 24 || i == 31 )
                                {
                                    ScreenMode = "0";
                                    // 1127 Log Mark
                                    TextLog.WriteLog("Camera 2 : 特殊演算法，i = " + i.ToString());
                                }
                                //BearLeftTopX = BearRightBottomX - cameraBearWidth;
                                //BearLeftTopY = BearRightBottomY - cameraBearHeight;
                                BearLeftTopX = Pose(BearRightBottomX, "X");
                                BearLeftTopY = Pose(BearRightBottomY, "Y");
                                // 1127 Log Mark
                                TextLog.WriteLog("Camera 2 : " + majorMethod.GetDRResultData().ToString());
                            }
                        }
                        break;
                    // 3 號相機
                    case 2:
                        for (int i = 0; i < cameraMappings[2].CameraToDisplayXY.Count; i++)
                        {
                            if (cameraBearX2 >= cameraMappings[2].CameraToDisplayXY[i][0]
                                && cameraBearX2 <= cameraMappings[2].CameraToDisplayXY[i][2]
                                && cameraBearY2 >= cameraMappings[2].CameraToDisplayXY[i][1]
                                && cameraBearY2 <= cameraMappings[2].CameraToDisplayXY[i][3])
                            {
                                
                                BearRightBottomX = Convert.ToInt32(cameraMappings[2].CameraToDisplayXY[i][6]
                                    - (cameraMappings[2].CameraToDisplayXY[i][6] - cameraMappings[2].CameraToDisplayXY[i][4])
                                    * (cameraMappings[2].CameraToDisplayXY[i][2] - cameraBearX2)
                                    / (cameraMappings[2].CameraToDisplayXY[i][2] - cameraMappings[2].CameraToDisplayXY[i][0])
                                    );
                                BearRightBottomY = Convert.ToInt32(cameraMappings[2].CameraToDisplayXY[i][7]
                                    - (cameraMappings[2].CameraToDisplayXY[i][7] - cameraMappings[2].CameraToDisplayXY[i][5])
                                    * (cameraMappings[2].CameraToDisplayXY[i][3] - cameraBearY2)
                                    / (cameraMappings[2].CameraToDisplayXY[i][3] - cameraMappings[2].CameraToDisplayXY[i][1])
                                    );
                                if (i == 22 || i == 23 || i == 24 || i == 30 || i == 31)
                                {
                                    ScreenMode = "0";
                                    // 1127 Log Mark
                                    TextLog.WriteLog("Camera 3 : 特殊演算法，i = " + i.ToString());
                                }
                                /*
                                BearLeftTopX = BearRightBottomX - cameraBearWidth;
                                BearLeftTopY = BearRightBottomY - cameraBearHeight;
                                */
                                BearLeftTopX = Pose(BearRightBottomX, "X");
                                BearLeftTopY = Pose(BearRightBottomY, "Y");
                                // 1127 Log Mark
                                TextLog.WriteLog("Camera 3 : " + majorMethod.GetDRResultData().ToString());
                            }
                        }
                        if (0 > BearLeftTopX  && Math.Abs(BearLeftTopX) > ScreenLeftTopX)
                        {
                            ScreenMode = "0";
                        }
                        break;
                    // 4 號相機
                    case 3:
                        for (int i = 0; i < cameraMappings[3].CameraToDisplayXY.Count; i++)
                        {
                            if (cameraBearX2 >= cameraMappings[3].CameraToDisplayXY[i][0]
                                && cameraBearX2 <= cameraMappings[3].CameraToDisplayXY[i][2]
                                && cameraBearY2 >= cameraMappings[3].CameraToDisplayXY[i][1]
                                && cameraBearY2 <= cameraMappings[3].CameraToDisplayXY[i][3])
                            {
                                BearRightBottomX = Convert.ToInt32(cameraMappings[3].CameraToDisplayXY[i][6]
                                    - (cameraMappings[3].CameraToDisplayXY[i][6] - cameraMappings[3].CameraToDisplayXY[i][4])
                                    * (cameraMappings[3].CameraToDisplayXY[i][2] - cameraBearX2)
                                    / (cameraMappings[3].CameraToDisplayXY[i][2] - cameraMappings[3].CameraToDisplayXY[i][0])
                                    );
                                BearRightBottomY = Convert.ToInt32(cameraMappings[3].CameraToDisplayXY[i][7]
                                    - (cameraMappings[3].CameraToDisplayXY[i][7] - cameraMappings[3].CameraToDisplayXY[i][5])
                                    * (cameraMappings[3].CameraToDisplayXY[i][3] - cameraBearY2)
                                    / (cameraMappings[3].CameraToDisplayXY[i][3] - cameraMappings[3].CameraToDisplayXY[i][1])
                                    );
                                if (i == 5 || i == 6 || i == 12 || i == 22 || i == 23)
                                {
                                    ScreenMode = "0";
                                    // 1127 Log Mark
                                    TextLog.WriteLog("Camera 4 : 特殊演算法，i = " + i.ToString());
                                }
                                /*
                                BearLeftTopX = BearRightBottomX - cameraBearWidth;
                                BearLeftTopY = BearRightBottomY - cameraBearHeight;
                                */
                                BearLeftTopX = Pose(BearRightBottomX, "X");
                                BearLeftTopY = Pose(BearRightBottomY, "Y");
                                // 1127 Log Mark
                                TextLog.WriteLog("Camera 4 : " + majorMethod.GetDRResultData().ToString());
                            }
                        }
                        if (0 > BearLeftTopX && Math.Abs(BearLeftTopX) > ScreenLeftTopX)
                        {
                            ScreenMode = "0";
                        }
                        break;
                    // 5 號相機
                    case 4:
                        for (int i = 0; i < cameraMappings[4].CameraToDisplayXY.Count; i++)
                        {
                            if (cameraBearX2 >= cameraMappings[4].CameraToDisplayXY[i][0]
                                && cameraBearX2 <= cameraMappings[4].CameraToDisplayXY[i][2]
                                && cameraBearY2 >= cameraMappings[4].CameraToDisplayXY[i][1]
                                && cameraBearY2 <= cameraMappings[4].CameraToDisplayXY[i][3])
                            {
                                BearRightBottomX = Convert.ToInt32(cameraMappings[4].CameraToDisplayXY[i][6]
                                    - (cameraMappings[4].CameraToDisplayXY[i][6] - cameraMappings[4].CameraToDisplayXY[i][4])
                                    * (cameraMappings[4].CameraToDisplayXY[i][2] - cameraBearX2)
                                    / (cameraMappings[4].CameraToDisplayXY[i][2] - cameraMappings[4].CameraToDisplayXY[i][0])
                                );
                                BearRightBottomY = Convert.ToInt32(cameraMappings[4].CameraToDisplayXY[i][7]
                                    - (cameraMappings[4].CameraToDisplayXY[i][7] - cameraMappings[4].CameraToDisplayXY[i][5])
                                    * (cameraMappings[4].CameraToDisplayXY[i][3] - cameraBearY2)
                                    / (cameraMappings[4].CameraToDisplayXY[i][3] - cameraMappings[4].CameraToDisplayXY[i][1])
                                    );
                                if ( i < 9 || (i > 12 && i < 16) || (i > 19 && i < 24) || (i > 26 && i < 32))
                                {
                                    ScreenMode = "0";
                                    // 1127 Log Mark
                                    TextLog.WriteLog("Camera 5 : 特殊演算法，i = " + i.ToString());
                                }
                                /*
                                BearLeftTopX = BearRightBottomX - cameraBearWidth;
                                BearLeftTopY = BearRightBottomY - cameraBearHeight;
                                */
                                BearLeftTopX = Pose(BearRightBottomX, "X");
                                BearLeftTopY = Pose(BearRightBottomY, "Y");
                                // 1127 Log Mark
                                TextLog.WriteLog("Camera 5 : " + majorMethod.GetDRResultData().ToString());
                            }
                        }
                        if (0 > BearLeftTopX && Math.Abs(BearLeftTopX) > ScreenLeftTopX)
                        {
                            ScreenMode = "0";
                        }
                        break;
                    // 6 號相機
                    case 5:
                        for (int i = 0; i < cameraMappings[5].CameraToDisplayXY.Count; i++)
                        {
                            if (cameraBearX2 >= cameraMappings[5].CameraToDisplayXY[i][0]
                                && cameraBearX2 <= cameraMappings[5].CameraToDisplayXY[i][2]
                                && cameraBearY2 >= cameraMappings[5].CameraToDisplayXY[i][1]
                                && cameraBearY2 <= cameraMappings[5].CameraToDisplayXY[i][3])
                            {
                                BearRightBottomX = Convert.ToInt32(cameraMappings[5].CameraToDisplayXY[i][6]
                                    - (cameraMappings[5].CameraToDisplayXY[i][6] - cameraMappings[5].CameraToDisplayXY[i][4])
                                    * (cameraMappings[5].CameraToDisplayXY[i][2] - cameraBearX2)
                                    / (cameraMappings[5].CameraToDisplayXY[i][2] - cameraMappings[5].CameraToDisplayXY[i][0])
                                    );
                                BearRightBottomY = Convert.ToInt32(cameraMappings[5].CameraToDisplayXY[i][7]
                                    - (cameraMappings[5].CameraToDisplayXY[i][7] - cameraMappings[5].CameraToDisplayXY[i][5])
                                    * (cameraMappings[5].CameraToDisplayXY[i][3] - cameraBearY2)
                                    / (cameraMappings[5].CameraToDisplayXY[i][3] - cameraMappings[5].CameraToDisplayXY[i][1])
                                    );
                                if ((i > -1 && i < 5) || (i > 7 && i < 32))
                                {
                                    ScreenMode = "0";
                                    // 1127 Log Mark
                                    TextLog.WriteLog("Camera 6 : 特殊演算法，i = " + i.ToString());
                                }
                                /*
                                 BearLeftTopX = BearRightBottomX - cameraBearWidth;
                                 BearLeftTopY = BearRightBottomY - cameraBearHeight;
                                 */
                                BearLeftTopX = Pose(BearRightBottomX, "X");
                                BearLeftTopY = Pose(BearRightBottomY, "Y");
                                // 1127 Log Mark
                                TextLog.WriteLog("Camera 6 : " + majorMethod.GetDRResultData().ToString());
                            }
                        }
                        if (0 > BearLeftTopX && Math.Abs(BearLeftTopX) > ScreenLeftTopX)
                        {
                            ScreenMode = "0";
                        }
                        break;
                    // 7 號相機
                    case 6:
                        for (int i = 0; i < cameraMappings[6].CameraToDisplayXY.Count; i++)
                        {
                            if (cameraBearX2 >= cameraMappings[6].CameraToDisplayXY[i][0]
                                && cameraBearX2 <= cameraMappings[6].CameraToDisplayXY[i][2]
                                && cameraBearY2 >= cameraMappings[6].CameraToDisplayXY[i][1]
                                && cameraBearY2 <= cameraMappings[6].CameraToDisplayXY[i][3])
                            {
                                BearRightBottomX = Convert.ToInt32(cameraMappings[6].CameraToDisplayXY[i][6]
                                    - (cameraMappings[6].CameraToDisplayXY[i][6] - cameraMappings[6].CameraToDisplayXY[i][4])
                                    * (cameraMappings[6].CameraToDisplayXY[i][2] - cameraBearX2)
                                    / (cameraMappings[6].CameraToDisplayXY[i][2] - cameraMappings[6].CameraToDisplayXY[i][0])
                                    );
                                BearRightBottomY = Convert.ToInt32(cameraMappings[6].CameraToDisplayXY[i][7]
                                    - (cameraMappings[6].CameraToDisplayXY[i][7] - cameraMappings[6].CameraToDisplayXY[i][5])
                                    * (cameraMappings[6].CameraToDisplayXY[i][3] - cameraBearY2)
                                    / (cameraMappings[6].CameraToDisplayXY[i][3] - cameraMappings[6].CameraToDisplayXY[i][1])
                                    );
                                if ((i > -1 && i < 13) || (i > 15 && i < 21) || (i > 22 && i < 28))
                                {
                                    ScreenMode = "0";
                                    // 1127 Log Mark
                                    TextLog.WriteLog("Camera 7 : 特殊演算法，i = " + i.ToString());
                                }
                                /*
                                BearLeftTopX = BearRightBottomX - cameraBearWidth;
                                BearLeftTopY = BearRightBottomY - cameraBearHeight;
                                */
                                BearLeftTopX = Pose(BearRightBottomX, "X");
                                BearLeftTopY = Pose(BearRightBottomY, "Y");
                                // 1127 Log Mark
                                TextLog.WriteLog("Camera 7 : " + majorMethod.GetDRResultData().ToString());
                            }
                        }
                        if (0 > BearLeftTopX && Math.Abs(BearLeftTopX) > ScreenLeftTopX)
                        {
                            ScreenMode = "0";
                        }
                        break;
                    // 8 號相機
                    case 7:
                        // 測試資料[0.17499999701976776 * 960, 0.3601851761341095 * 540, 0.2776041626930237 * 960, 0.5027777552604675 * 540]
                        // => [167.999997138977, 194.4999951124189, 266.4999961853021, 271.4999878406522] => [168, 194, 266, 271]
                        for (int i = 0; i < cameraMappings[7].CameraToDisplayXY.Count; i++)
                        {
                            if (cameraBearX2 >= cameraMappings[7].CameraToDisplayXY[i][0]
                                && cameraBearX2 <= cameraMappings[7].CameraToDisplayXY[i][2]
                                && cameraBearY2 >= cameraMappings[7].CameraToDisplayXY[i][1]
                                && cameraBearY2 <= cameraMappings[7].CameraToDisplayXY[i][3])
                            {
                                BearRightBottomX = Convert.ToInt32(cameraMappings[7].CameraToDisplayXY[i][6]
                                    - (cameraMappings[7].CameraToDisplayXY[i][6] - cameraMappings[7].CameraToDisplayXY[i][4])
                                    * (cameraMappings[7].CameraToDisplayXY[i][2] - cameraBearX2)
                                    / (cameraMappings[7].CameraToDisplayXY[i][2] - cameraMappings[7].CameraToDisplayXY[i][0])
                                    );
                                BearRightBottomY = Convert.ToInt32(cameraMappings[7].CameraToDisplayXY[i][7]
                                    - (cameraMappings[7].CameraToDisplayXY[i][7] - cameraMappings[7].CameraToDisplayXY[i][5])
                                    * (cameraMappings[7].CameraToDisplayXY[i][3] - cameraBearY2)
                                    / (cameraMappings[7].CameraToDisplayXY[i][3] - cameraMappings[7].CameraToDisplayXY[i][1])
                                    );
                                if (i == 15 || i == 23 || i == 30)
                                {
                                    ScreenMode = "0";
                                    // 1127 Log Mark
                                    TextLog.WriteLog("Camera 8 : 特殊演算法，i = " + i.ToString());
                                }
                                //BearLeftTopX = BearRightBottomX - cameraBearWidth;
                                //BearLeftTopY = BearRightBottomY - cameraBearHeight;
                                BearLeftTopX = Pose(BearRightBottomX, "X");
                                BearLeftTopY = Pose(BearRightBottomY, "Y");
                                // 1127 Log Mark
                                TextLog.WriteLog("Camera 8 : " + majorMethod.GetDRResultData().ToString());
                            }
                        }
                        break;
                    default:
                        break;
                }

            }
        }

        private static int Pose(int number, string str)
        {
            int ans = 0;
            if ("stand".Equals(dataCollectionObject.SelectedData[2].ToString().ToLower()))
            {
                if ("X".Equals(str))
                {
                    ans = number - 130;
                }
                else
                {
                    ans = number - 370;
                }
                
            }
            else if ("walk".Equals(dataCollectionObject.SelectedData[2].ToString().ToLower()))
            {
                if ("X".Equals(str))
                {
                    ans = number - 180;
                }
                else
                {
                    ans = number - 120;
                }
            }
            else
            {
                if ("X".Equals(str))
                {
                    ans = number - 150;
                }
                else
                {
                    ans = number - 130;
                }
            }
            return ans;
        }

        private static void MechanismData(Machine machine)
        {
            // 假設初始位置在 【透顯全視野的(0, 0)位置】
            // degree 角度
            //ScreenLeftTopX = Convert.ToInt32(8.41 * machine.Degree + 252.3);
            if (machine.Degree < -30.0)
            {
                machine.Degree = -30;
            }
            else if (machine.Degree > 110.0)
            {
                machine.Degree = 110.0;
            }
            ScreenLeftTopX = Convert.ToInt32(14 * (machine.Degree + 30));
            if (machine.Height < 0.0)
            {
                machine.Height = 0.0;
            }
            else if (machine.Height > 70.0)
            {
                machine.Height = 70.0;
            }
            // height 高度
            //ScreenLeftTopY = Convert.ToInt32(-13.2 * machine.Height + 924);
            ScreenLeftTopY = Convert.ToInt32((70.0 - machine.Height) * 10 / 7);

            // 花絮 1
            dataCollectionObject.AreaEgg[0].PositionXY[0] = Convert.ToInt32(-2.2 * machine.Degree) + 568;
            // 花絮 2
            dataCollectionObject.AreaEgg[1].PositionXY[0] = Convert.ToInt32(-2 * machine.Degree) + 1130;
            // 花絮 3
            dataCollectionObject.AreaEgg[2].PositionXY[0] = Convert.ToInt32(-0.67 * machine.Degree) + 1830;
            // 花絮 5
            //dataCollectionObject.AreaEgg[3].PositionXY[0] = Convert.ToInt32(-2.2 * machine.Degree) + 568;
            // 花絮 8
            dataCollectionObject.AreaEgg[4].PositionXY[0] = Convert.ToInt32(-4.6 * machine.Degree) + 1434;
            // 花絮 14
            dataCollectionObject.AreaEgg[5].PositionXY[0] = Convert.ToInt32(0.65 * machine.Degree) + 2200;
            // 花絮 15
            //dataCollectionObject.AreaEgg[6].PositionXY[0] = Convert.ToInt32(-2.2 * machine.Degree) + 240;
            // 花絮 16
            dataCollectionObject.AreaEgg[7].PositionXY[0] = Convert.ToInt32(-3 * machine.Degree) + 910;
        }

        public static void Confidence(dynamic dataArray)
        {
            confidenceIndex = 0.0;
            // 傳遞值 = -1 為完全沒有熊的資訊
            ScreenMode = "-1";
            if (dataCollectionObject.SelectedData != null && dataCollectionObject.SelectedData.Count > 0 && Convert.ToDouble(dataCollectionObject.SelectedData[0]) != -9999.0 && Convert.ToDouble(dataCollectionObject.SelectedData[0]) != -8888.0)
            {
                ScreenMode = "0";
                LiveCamId = "1";
                BearMode = "";
                cameraBearWidth = 0;
                cameraBearHeight = 0;
                switch (Convert.ToInt32(dataCollectionObject.SelectedData[3]) + 1)
                {
                    case 1:
                        if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) >= majorMethod.confThresholdList[0])
                        {
                            ScreenMode = "1";
                        }
                        break;
                    case 2:
                        if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) >= majorMethod.confThresholdList[1])
                        {
                            ScreenMode = "1";
                        }
                        break;
                    case 3:
                        if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) >= majorMethod.confThresholdList[2])
                        {
                            ScreenMode = "1";
                        }
                        break;
                    case 4:
                        if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) >= majorMethod.confThresholdList[3])
                        {
                            ScreenMode = "1";
                        }
                        break;
                    case 5:
                        if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) >= majorMethod.confThresholdList[4])
                        {
                            ScreenMode = "1";
                        }
                        break;
                    case 6:
                        if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) >= majorMethod.confThresholdList[5])
                        {
                            ScreenMode = "1";
                        }
                        break;
                    case 7:
                        if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) >= majorMethod.confThresholdList[6])
                        {
                            ScreenMode = "1";
                        }
                        break;
                    case 8:
                        if (Convert.ToDouble(dataCollectionObject.SelectedData[0]) >= majorMethod.confThresholdList[7])
                        {
                            ScreenMode = "1";
                        }
                        break;
                }
                if ("1".Equals(ScreenMode))
                {
                    LiveCamId = dataCollectionObject.SelectedData[3].ToString();
                    BearMode = dataCollectionObject.SelectedData[2].ToString();
                    str = dataCollectionObject.SelectedData[1].ToString().Replace("\r\n", "").Replace("[", "").Replace("]", "").Split(",")[0];
                    cameraBearX1 = Convert.ToDouble(str) * dataCollectionObject.ResolutionX;
                    str = dataCollectionObject.SelectedData[1].ToString().Replace("\r\n", "").Replace("[", "").Replace("]", "").Split(",")[1];
                    cameraBearY1 = Convert.ToDouble(str) * dataCollectionObject.ResolutionY;
                    str = dataCollectionObject.SelectedData[1].ToString().Replace("\r\n", "").Replace("[", "").Replace("]", "").Split(",")[2];
                    cameraBearX2 = Convert.ToDouble(str) * dataCollectionObject.ResolutionX;
                    str = dataCollectionObject.SelectedData[1].ToString().Replace("\r\n", "").Replace("[", "").Replace("]", "").Split(",")[3];
                    cameraBearY2 = Convert.ToDouble(str) * dataCollectionObject.ResolutionY;

                    if (cameraBearX1 > cameraBearX2)
                    {
                        temp = cameraBearX1;
                        cameraBearX1 = cameraBearX2;
                        cameraBearX2 = temp;
                    }
                    if (cameraBearY1 > cameraBearY2)
                    {
                        temp = cameraBearY1;
                        cameraBearY1 = cameraBearY2;
                        cameraBearY2 = temp;
                    }
                    if (cameraBearX2 - cameraBearX1 < 50)
                    {
                        // 1127 Log Mark
                        TextLog.WriteLog("熊的水平太小，dataCollectionObject.SelectedData[0] : " + dataCollectionObject.SelectedData[0]
                            + ", dataCollectionObject.SelectedData[1] : " + dataCollectionObject.SelectedData[1]
                            + ", dataCollectionObject.SelectedData[2] : " + dataCollectionObject.SelectedData[2]
                            + ", dataCollectionObject.SelectedData[3] : " + dataCollectionObject.SelectedData[3]);
                        cameraBearX1 -= 80;
                        cameraBearX2 += 80;
                        if ("stand".Equals(BearMode.ToString()))
                        {
                            cameraBearX1 += 5;
                            cameraBearX2 -= 5;
                        }
                        if ("lie".Equals(BearMode.ToString()) || "sit".Equals(BearMode.ToString()))
                        {
                            cameraBearX1 -= 0;
                            cameraBearX2 -= 0;
                        }
                        if ("walk".Equals(BearMode.ToString()))
                        {
                            cameraBearX1 -= 10;
                            cameraBearX2 += 10;
                        }
                    }
                    if (cameraBearY2 - cameraBearY1 < 50)
                    {
                        // 1127 Log Mark
                        TextLog.WriteLog("熊的垂直太小，dataCollectionObject.SelectedData[0] : " + dataCollectionObject.SelectedData[0]
                            + ", dataCollectionObject.SelectedData[1] : " + dataCollectionObject.SelectedData[1]
                            + ", dataCollectionObject.SelectedData[2] : " + dataCollectionObject.SelectedData[2]
                            + ", dataCollectionObject.SelectedData[3] : " + dataCollectionObject.SelectedData[3]);
                        cameraBearY1 -= 80;
                        cameraBearY2 += 80;
                        if ("stand".Equals(BearMode.ToString()))
                        {
                            cameraBearY1 += 5;
                            cameraBearY2 -= 5;
                        }
                        if ("lie".Equals(BearMode.ToString()) || "sit".Equals(BearMode.ToString()))
                        {
                            cameraBearY1 -= 0;
                            cameraBearY2 -= 0;
                        }
                        if ("walk".Equals(BearMode.ToString()))
                        {
                            cameraBearY1 -= 10;
                            cameraBearY2 += 10;
                        }
                    }

                    cameraBearWidth = Convert.ToInt32(cameraBearX2 - cameraBearX1);
                    cameraBearHeight = Convert.ToInt32(cameraBearY2 - cameraBearY1);
                }
            }
            else
            {
                if (dataArray != null && dataArray.Count == 12)
                {
                    for (int i = 3; i < dataArray.Count; i++)
                    {
                        if (dataArray[i][0] != null && !"".Equals(dataArray[i][0]) && !"-9999.0".Equals(dataArray[i][0]) && !"-8888.0".Equals(dataArray[i][0]) && !"NA".Equals(dataArray[i][0]) && !"N".Equals(dataArray[i][0])
                            && confidenceIndex < majorMethod.confThreshold && (1 == i-2 || 2 == i-2 || 6 == i-2 || 7 == i-2 || 8 == i-2))
                        {
                            confidenceIndex = Convert.ToDouble(dataArray[i][0]);
                            // 傳遞值 = 0  為熊可能在特殊位置
                            ScreenMode = "0";
                        }
                        if (dataArray[i][0] != null && !"".Equals(dataArray[i][0]) && !"-9999.0".Equals(dataArray[i][0]) && !"-8888.0".Equals(dataArray[i][0]) && !"NA".Equals(dataArray[i][0]) && !"N".Equals(dataArray[i][0])
                            && confidenceIndex < majorMethod.confThreshold && (3 == i - 2 || 4 == i - 2 || 5 == i - 2))
                        {
                            confidenceIndex = Convert.ToDouble(dataArray[i][0]);
                            // 傳遞值 = 0  為熊可能在特殊位置
                            ScreenMode = "0";
                        }
                    }
                }
                //if (majorMethod.arTime > Convert.ToInt32(MajorMethod.ModeInterval.TotalSeconds))
                if (majorMethod.arTime > 10)
                {
                    ScreenMode = "-1";
                    // 1127 Log Mark
                    TextLog.WriteLog("majorMethod.arTime > 10, DateTime.Now = " + DateTime.Now.ToString() + ", majorMethod.ModeLastChangeTime = " + majorMethod.ModeLastChangeTime.ToString()
                        + ", (DateTime.Now - majorMethod.ModeLastChangeTime) = " + (DateTime.Now - majorMethod.ModeLastChangeTime).ToString());
                }
            }
        }

        private static BearObject UI_Json()
        {
            TextLog.WriteLog("UI_Json Start timeStamp : " + dataCollectionObject.Timestamp.ToString());
            var bearObject = new BearObject
            {
                // 本份 JSON 的版本
                Version = dataCollectionObject.Version,
                // 本份 JSON 傳送的日期時間，timestamp 到 ms
                Timestamp = dataCollectionObject.Timestamp,
                // UI 要呈現的階層
                // 傳遞值 = -1 為完全沒有熊的資訊
                // 傳遞值 = 0  為熊可能在特殊位置
                // 傳遞值 = 1  為熊可由 AR 運算得到位置
                // 二階以上部分主要是觸控引起，由 UI 自行控制
                ScreenMode = ScreenMode,
                // 保留欄位，永遠傳 -1
                SpecialPosition = SpecialPosition,
                // 熊在所演算的空間座標中的值
                BearXY = new List<int> { BearLeftTopX, BearLeftTopY, BearRightBottomX, BearRightBottomY },
                // 透顯在空間座標中，左上點的 x, y
                ScreenLeftTop = new List<int> { ScreenLeftTopX, ScreenLeftTopY },
                // 熊在場域中的估算位置，x 方面，要給小地圖使用
                MapXRatio = mapRotateX.ToString(),
                // 熊在場域中的估算位置，y 方面，要給小地圖使用
                MapYRatio = mapRotateY.ToString(),
                // 熊的即時影像，目前是判斷值最高的那隻 cam，螢幕上用 rtsp 去跟這隻攝影機取得與顯示影像
                LiveCamId = LiveCamId,
                // 熊之目前樣態："0"為趴，"1"為二足，"2"為四足
                BearMode = BearMode,
                // 8 個場地黑熊花絮，陣列方式為彩蛋在AR空間上的座標位置
                AreaEgg = new List<AreaEgg>
                {
                    new AreaEgg
                    {
                        // 花絮 1
                        EggId = dataCollectionObject.AreaEgg[0].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[0].PositionXY[0], dataCollectionObject.AreaEgg[0].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 花絮 2
                        EggId = dataCollectionObject.AreaEgg[1].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[1].PositionXY[0], dataCollectionObject.AreaEgg[1].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 花絮 3
                        EggId = dataCollectionObject.AreaEgg[2].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[2].PositionXY[0], dataCollectionObject.AreaEgg[2].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 花絮 5
                        EggId = dataCollectionObject.AreaEgg[3].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[3].PositionXY[0], dataCollectionObject.AreaEgg[3].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 花絮 8
                        EggId = dataCollectionObject.AreaEgg[4].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[4].PositionXY[0], dataCollectionObject.AreaEgg[4].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 花絮 14
                        EggId = dataCollectionObject.AreaEgg[5].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[5].PositionXY[0], dataCollectionObject.AreaEgg[5].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 花絮 15
                        EggId = dataCollectionObject.AreaEgg[6].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[6].PositionXY[0], dataCollectionObject.AreaEgg[6].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 花絮 16
                        EggId = dataCollectionObject.AreaEgg[7].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[7].PositionXY[0], dataCollectionObject.AreaEgg[7].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 絕對地標 91
                        EggId = dataCollectionObject.AreaEgg[8].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[8].PositionXY[0], dataCollectionObject.AreaEgg[8].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 絕對地標 92
                        EggId = dataCollectionObject.AreaEgg[9].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[9].PositionXY[0], dataCollectionObject.AreaEgg[9].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 絕對地標 93
                        EggId = dataCollectionObject.AreaEgg[10].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[10].PositionXY[0], dataCollectionObject.AreaEgg[10].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 絕對地標 94
                        EggId = dataCollectionObject.AreaEgg[11].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[11].PositionXY[0], dataCollectionObject.AreaEgg[11].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 絕對地標 96
                        EggId = dataCollectionObject.AreaEgg[12].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[12].PositionXY[0], dataCollectionObject.AreaEgg[12].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 絕對地標 97
                        EggId = dataCollectionObject.AreaEgg[13].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[13].PositionXY[0], dataCollectionObject.AreaEgg[13].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 絕對地標 98
                        EggId = dataCollectionObject.AreaEgg[14].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[14].PositionXY[0], dataCollectionObject.AreaEgg[14].PositionXY[1] }
                    },
                    new AreaEgg
                    {
                        // 絕對地標 99
                        EggId = dataCollectionObject.AreaEgg[15].EggId,
                        PositionXY = new List<int> { dataCollectionObject.AreaEgg[15].PositionXY[0], dataCollectionObject.AreaEgg[15].PositionXY[1] }
                    }
                },
                DataArray = dataArray,
                SelectedData = dataCollectionObject.SelectedData
            };
            TextLog.WriteLog("UI_Json Stop timeStamp : " + dataCollectionObject.Timestamp.ToString());
            return bearObject;
        }

    }
}